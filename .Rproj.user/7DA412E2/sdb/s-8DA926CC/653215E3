{
    "collab_server" : "",
    "contents" : "library(tigris)\nlibrary(sp)\nlibrary(sf)\nlibrary(rgdal)\nlibrary(tidyverse)\nlibrary(geojsonio)\n#library(censusapi)\n# options(tigris_year = 2017)\n# need Census API key for data\n# https://api.census.gov/data/key_signup.html\n#View(listCensusApis())\n#censusAPIKey <- '279cf181f2718a37171db524990e43424724b088'\n#populationData <- getCensus(name = 'acs/acs5', vintage = 2016, key = censusAPIKey, vars = c('NAME', 'group(GEO.id,GEO.id2,GEO.display-label)'), region = 'state:*') \n\nusStatesACS2017 <- states(cb = T, resolution = '5m', year = 2017)\n\nstateAbbrev <- read_csv('data/state_abbrev.csv')\npopulationData <- read_csv(file = 'data/ACS_16_5YR_S0101/ACS_16_5YR_S0101_with_ann.csv')\npopulationData\n\npopulationData <- populationData %>% \n  select(-(contains('MOE'))) %>% \n  filter(row_number() > 1) %>% \n  select(`GEO.id`:HC03_EST_VC01, HC01_EST_VC28)\n\npopulationData <- populationData %>% mutate(\n  state = `GEO.display-label`,\n  pop = as.numeric(HC01_EST_VC01), \n  pop_male = as.numeric(HC02_EST_VC01), \n  pop_female = as.numeric(HC03_EST_VC01), \n  per_pop_adult = as.numeric(HC01_EST_VC28)) \n\npopulationData <- populationData %>%\n  mutate(pop_adult = pop * per_pop_adult / 100) %>%\n  select(state, pop, pop_male, pop_female, per_pop_adult, pop_adult)\n\n# setup region data\nregionS <- c('DC', 'TX', 'OK', 'AR', 'LA', 'MS', 'AL', 'TN', 'GA', 'FL', 'SC', 'NC', 'VA', 'KY', 'WV', 'MD', 'DE')\nregionNE <- c('RI', 'NJ', 'PA', 'CT', 'NY', 'VT', 'NH', 'MA', 'ME')\nregionMW <- c('OH', 'MI', 'IN', 'WI', 'IL', 'MN', 'IA', 'MO', 'ND', 'SD', 'NE', 'KS')\nregionW <- c('AK', 'HI', 'WA', 'OR', 'CA', 'NV', 'ID', 'MT', 'WY', 'UT', 'AZ', 'NM', 'CO')\n\n\nstateAbbrev <- stateAbbrev %>% mutate(region = case_when(\n  `Postal Code` %in% regionS ~ 'South',\n  `Postal Code` %in% regionNE ~ 'Northeast',\n  `Postal Code` %in% regionMW ~ 'Midwest',\n  `Postal Code` %in% regionW ~ 'West'\n  ))\n\npopulationData <- populationData %>% left_join(stateAbbrev, by = c('state' = 'State/District'))\n\npopulationData <- populationData %>% \n  mutate(tot_us = sum(pop_adult)) %>%\n  group_by(region) %>% \n  mutate(\n    tot_region = sum(pop_adult),\n    per_region = tot_region / tot_us) %>%\n  group_by(state) %>%\n  mutate(per_state = pop_adult / tot_region) %>%\n  ungroup()\n\npopulationData <- populationData %>% rename(PostalCode = `Postal Code`)\n\n### total number of random points to display on map\ntotalMapPoints <- 8000\n\n### calculate proportional points per region and points per state\npopulationData <- populationData %>%\n  mutate(ptsPerRegion = totalMapPoints * per_region,\n         ptsPerState = ptsPerRegion * per_state)\n\n# populationData %>% select(state, region, contains('pts'))\n\n### keep it in sp for using spsample\n### project to 4236\nprj4326 <- '+proj=longlat +ellps=WGS84'\nusStatesACS2017sp4236 <- spTransform(usStatesACS2017, prj4326)\nusStatesACS2017sp4236 <- usStatesACS2017sp4236[!usStatesACS2017sp4236$NAME%in%c('American Samoa', 'Commonwealth of the Northern Mariana Islands', 'Puerto Rico', 'United States Virgin Islands'),]\ngeojson_write(usStatesACS2017sp4236, geometry = 'polygon', file = 'json/states_pop.geojson', overwrite = T)\n\n### merge states sp with population data frame on state abbreviation\nusStatesACS2017sp4236mrg <- merge(usStatesACS2017sp4236, populationData, by.x = 'STUSPS', by.y = 'PostalCode', all = F)\n\n#### find random points for gender/strictness\nspList <- list()  # list to hold all spdf's for each state\nfor (i in 1:nrow(usStatesACS2017sp4236mrg)) {\n  currentState <- usStatesACS2017sp4236mrg[i,]\n  numPoints <- floor(currentState$ptsPerState)\n  name = currentState@data$NAME\n  region <- currentState@data$region\n  abbrev <- currentState@data$STUSPS\n  groupVec <- character()\n  classVec <- character()\n  answerVec <- character()\n  \n  #currPew <- genderStrictness %>% filter(F_CREGION_FINAL == region)\n  #currPew <- educationWho %>% filter(F_CREGION_FINAL == region)\n  #currPew <- politicalType %>% filter(F_CREGION_FINAL == region)\n  #currPew <- incomeMentalIllness %>% filter(F_CREGION_FINAL == region)\n  currPew <- raceViolence %>% filter(F_CREGION_FINAL == region)\n  \n  totPts <- 0\n  for (i in 1:nrow(currPew)) {\n    currPoints <- floor(numPoints * currPew[i,'per']) %>% pull\n    totPts <- totPts + currPoints\n    if (i == nrow(currPew) & totPts < numPoints ) {\n      currPoints <- currPoints + (numPoints - totPts)\n    }\n    classVec <- append(classVec, rep(as.character(currPew[i,'class']), currPoints))\n    groupVec <- append(groupVec, rep(as.character(currPew[i,]$group), currPoints))\n    answerVec <- append(answerVec, rep(as.character(currPew[i,]$answer), currPoints))\n    \n  }\n  currSample <- spsample(x = currentState, n = numPoints, geometry = 'polygon', type = 'random')\n  spdf <- SpatialPointsDataFrame(coords = currSample@coords, \n                                   data = data.frame(STUSPS = rep(abbrev, numPoints),\n                                                     NAME = rep(name, numPoints),\n                                                     region = rep(region, numPoints),\n                                                     group = groupVec,\n                                                     class = classVec,\n                                                     answer = answerVec), proj4string = CRS(prj4326))\n  spList <- append(spList, spdf)\n  #randomList <- append(randomList, samp)\n}\nrandomSPDF <- spList[[1]]\nfor (i in 2:length(spList)) {\n  randomSPDF <- rbind(randomSPDF, spList[[i]])\n}\n\n\n### gender\nfemaleSPDF <- randomSPDF[randomSPDF$group=='Female',]\nmaleSPDF <- randomSPDF[randomSPDF$group=='Male',]\ngeojson_write(femaleSPDF, geometry = 'polygon', file = 'json/female_random_points.geojson', overwrite = T)\ngeojson_write(maleSPDF, geometry = 'polygon', file = 'json/male_random_points.geojson', overwrite = T)\n\n### education\ncollegeSPDF <- randomSPDF[randomSPDF$group=='College',]\nbelowcollegeSPDF <- randomSPDF[randomSPDF$group=='BelowCollege',]\ngeojson_write(collegeSPDF, geometry = 'polygon', file = 'json/college_random_points.geojson', overwrite = T)\ngeojson_write(belowcollegeSPDF, geometry = 'polygon', file = 'json/belowcollege_random_points.geojson', overwrite = T)\n\n### political\ndemocratSPDF <- randomSPDF[randomSPDF$group=='Democrat',]\nrepublicanSPDF <- randomSPDF[randomSPDF$group=='Republican',]\ngeojson_write(democratSPDF, geometry = 'polygon', file = 'json/democrat_random_points.geojson', overwrite = T)\ngeojson_write(republicanSPDF, geometry = 'polygon', file = 'json/republican_random_points.geojson', overwrite = T)\n\n### income\nlowincomeSPDF <- randomSPDF[randomSPDF$group=='LowMediumIncome',]\nhighincomeSPDF <- randomSPDF[randomSPDF$group=='HighIncome',]\ngeojson_write(lowincomeSPDF, geometry = 'polygon', file = 'json/lowincome_random_points.geojson', overwrite = T)\ngeojson_write(highincomeSPDF, geometry = 'polygon', file = 'json/highincome_random_points.geojson', overwrite = T)\n\n### race\nwhiteSPDF <- randomSPDF[randomSPDF$group=='White',]\nnonwhiteSPDF <- randomSPDF[randomSPDF$group=='NonWhite',]\ngeojson_write(whiteSPDF, geometry = 'polygon', file = 'json/white_random_points.geojson', overwrite = T)\ngeojson_write(nonwhiteSPDF, geometry = 'polygon', file = 'json/nonwhite_random_points.geojson', overwrite = T)\n\n########## may not need this #########\n#usStatesACS2017sf <- st_as_sf(usStatesACS2017)\n#usStatesACS2017sf4326 <- st_transform(usStatesACS2017sf, 4326)\n#statesPop <- inner_join(x = usStatesACS2017sf4326, y = populationData, by = c('STUSPS' = 'PostalCode'))\n#contiguous <- statesPop %>% filter(!NAME %in% c('Alaska', 'Hawaii'))\n#geojson_write(contiguous, geometry = 'polygon', file = 'json/states_pop.geojson', overwrite = T)\n\n\n\n",
    "created" : 1528573923856.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "267245507",
    "id" : "653215E3",
    "lastKnownWriteTime" : 1528913943,
    "last_content_update" : 1528913943514,
    "path" : "~/Documents/git/gun_violence/census.R",
    "project_path" : "census.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}