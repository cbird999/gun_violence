mutate(per_state = pop_adult / tot_region)
regionS <- c('DC', 'TX', 'OK', 'AR', 'LA', 'MS', 'AL', 'TN', 'GA', 'FL', 'SC', 'NC', 'VA', 'KY', 'WV', 'MD', 'DE')
regionNE <- c('RI', 'NJ', 'PA', 'CT', 'NY', 'VT', 'NH', 'MA', 'ME')
regionMW <- c('OH', 'MI', 'IN', 'WI', 'IL', 'MN', 'IA', 'MO', 'ND', 'SD', 'NE', 'KS')
regionW <- c('AK', 'HI', 'WA', 'OR', 'CA', 'NV', 'ID', 'MT', 'WY', 'UT', 'AZ', 'NM', 'CO')
stateAbbrev <- stateAbbrev %>% mutate(region = case_when(
`Postal Code` %in% regionS ~ 'S',
`Postal Code` %in% regionNE ~ 'NE',
`Postal Code` %in% regionMW ~ 'MW',
`Postal Code` %in% regionW ~ 'W'
))
populationData <- populationData %>% left_join(stateAbbrev, by = c('state' = 'State/District'))
populationData %>%
mutate(tot_us = sum(pop_adult)) %>%
group_by(region) %>%
mutate(
tot_region = sum(pop_adult),
per_region = tot_region / tot_us) %>%
group_by(state) %>%
mutate(per_state = pop_adult / tot_region)
tot_region = sum(pop_adult),
per_region = tot_region / tot_us) %>%
group_by(state) %>%
mutate(per_state = pop_adult / tot_region)
tot_region = sum(pop_adult),
per_region = tot_region / tot_us) %>%
group_by(state) %>%
mutate(per_state = pop_adult / tot_region)
populationData <- populationData %>%
mutate(tot_us = sum(pop_adult)) %>%
group_by(region) %>%
mutate(
tot_region = sum(pop_adult),
per_region = tot_region / tot_us) %>%
group_by(state) %>%
mutate(per_state = pop_adult / tot_region)
populationData
populationData %>% group_by(region) %>% summarise(tot = sum(per_state))
populationData <- populationData %>%
mutate(ptsPerRegion = numPts * per_region,
ptsPerState = ptsPerRegion * per_state)
numPts <- 10000
populationData <- populationData %>%
mutate(ptsPerRegion = numPts * per_region,
ptsPerState = ptsPerRegion * per_state)
populationData
populationData %>% select(contains('pts'))
populationData %>% select(region, contains('pts'))
populationData <- read_csv(file = 'data/ACS_16_5YR_S0101/ACS_16_5YR_S0101_with_ann.csv')
populationData
populationData <- populationData %>%
select(-(contains('MOE'))) %>%
filter(row_number() > 1) %>%
select(`GEO.id`:HC03_EST_VC01, HC01_EST_VC28)
populationData <- populationData %>% mutate(
state = `GEO.display-label`,
pop = as.numeric(HC01_EST_VC01),
pop_male = as.numeric(HC02_EST_VC01),
pop_female = as.numeric(HC03_EST_VC01),
per_pop_adult = as.numeric(HC01_EST_VC28))
populationData <- populationData %>%
mutate(pop_adult = pop * per_pop_adult / 100) %>%
select(state, pop, pop_male, pop_female, per_pop_adult, pop_adult)
regionS <- c('DC', 'TX', 'OK', 'AR', 'LA', 'MS', 'AL', 'TN', 'GA', 'FL', 'SC', 'NC', 'VA', 'KY', 'WV', 'MD', 'DE')
regionNE <- c('RI', 'NJ', 'PA', 'CT', 'NY', 'VT', 'NH', 'MA', 'ME')
regionMW <- c('OH', 'MI', 'IN', 'WI', 'IL', 'MN', 'IA', 'MO', 'ND', 'SD', 'NE', 'KS')
regionW <- c('AK', 'HI', 'WA', 'OR', 'CA', 'NV', 'ID', 'MT', 'WY', 'UT', 'AZ', 'NM', 'CO')
stateAbbrev <- stateAbbrev %>% mutate(region = case_when(
`Postal Code` %in% regionS ~ 'S',
`Postal Code` %in% regionNE ~ 'NE',
`Postal Code` %in% regionMW ~ 'MW',
`Postal Code` %in% regionW ~ 'W'
))
populationData <- populationData %>% left_join(stateAbbrev, by = c('state' = 'State/District'))
populationData <- populationData %>%
mutate(tot_us = sum(pop_adult)) %>%
group_by(region) %>%
mutate(
tot_region = sum(pop_adult),
per_region = tot_region / tot_us) %>%
group_by(state) %>%
mutate(per_state = pop_adult / tot_region) %>%
ungroup()
numPts <- 10000
populationData <- populationData %>%
mutate(ptsPerRegion = numPts * per_region,
ptsPerState = ptsPerRegion * per_state)
populationData %>% select(region, contains('pts'))
w25 %>%
group_by(F_CREGION_FINAL, F_SEX_FINAL, GUNSTRICT_W25) %>%
summarise(per = sum(TOT_W25) / first(TOT_REGION)) %>%
summarise(tot = sum(per)) %>%
print(n = Inf)
w25 <- read.spss('data/W25_Mar17/ATP W25.sav',
use.value.labels = T,
to.data.frame = T,
trim.factor.names = T,
trim_values = T,
duplicated.value.labels = 'condense')
library(foreign)
w25 <- read.spss('data/W25_Mar17/ATP W25.sav',
use.value.labels = T,
to.data.frame = T,
trim.factor.names = T,
trim_values = T,
duplicated.value.labels = 'condense')
head(w25)
w25 <- w25 %>%
mutate(TOT_W25 = nrow(w25) * WEIGHT_W25, TOT_W2526 = nrow(w25) * WEIGHT_W25W26) %>%
group_by(F_CREGION_FINAL) %>%
mutate(TOT_REGION = sum(TOT_W25)) %>%
ungroup() %>%
select(F_CREGION_FINAL, F_SEX_FINAL, TOT_REGION, TOT_W25, contains('GUN'), everything())
w25 %>%
group_by(F_CREGION_FINAL, F_SEX_FINAL, GUNSTRICT_W25) %>%
summarise(per = sum(TOT_W25) / first(TOT_REGION)) %>%
summarise(tot = sum(per)) %>%
print(n = Inf)
w25
w25 %>%
group_by(F_CREGION_FINAL, F_SEX_FINAL, GUNSTRICT_W25) %>%
summarise(per = sum(TOT_W25) / first(TOT_REGION)) %>%
summarise(tot = sum(per)) %>%
print(n = Inf)
distinct(w25, GUNSTRICT_W25)
w25 %>%
select(F_CREGION_FINAL, F_SEX_FINAL, TOT_REGION, TOT_W25, GUNSTRICT_W25) %>%
group_by(F_CREGION_FINAL, F_SEX_FINAL, GUNSTRICT_W25) %>%
summarise(per = sum(TOT_W25) / first(TOT_REGION)) %>%
summarise(tot = sum(per)) %>%
print(n = Inf)
w25 %>%
select(F_CREGION_FINAL, F_SEX_FINAL, TOT_REGION, TOT_W25, GUNSTRICT_W25)
w25 %>%
select(F_CREGION_FINAL, F_SEX_FINAL, TOT_REGION, TOT_W25, GUNSTRICT_W25) %>%
group_by(F_CREGION_FINAL, F_SEX_FINAL, GUNSTRICT_W25) %>%
summarise(per = sum(TOT_W25) / first(TOT_REGION)) %>%
#summarise(tot = sum(per)) %>%
print(n = Inf)
w25 %>%
select(F_CREGION_FINAL, F_SEX_FINAL, TOT_REGION, TOT_W25, GUNSTRICT_W25) %>%
filter(GUNSTRICT_W25 != 'Refused') %>%
group_by(F_CREGION_FINAL, F_SEX_FINAL, GUNSTRICT_W25) %>%
summarise(per = sum(TOT_W25) / first(TOT_REGION)) %>%
#summarise(tot = sum(per)) %>%
print(n = Inf)
library(jsonlite)
genderStrictness <- w25 %>%
select(F_CREGION_FINAL, F_SEX_FINAL, TOT_REGION, TOT_W25, GUNSTRICT_W25) %>%
filter(GUNSTRICT_W25 != 'Refused') %>%
group_by(F_CREGION_FINAL, F_SEX_FINAL, GUNSTRICT_W25) %>%
summarise(per = sum(TOT_W25) / first(TOT_REGION)) %>%
#summarise(tot = sum(per)) %>%
print(n = Inf)
genderStrictness <- w25 %>%
select(F_CREGION_FINAL, F_SEX_FINAL, TOT_REGION, TOT_W25, GUNSTRICT_W25) %>%
filter(GUNSTRICT_W25 != 'Refused') %>%
group_by(F_CREGION_FINAL, F_SEX_FINAL, GUNSTRICT_W25) %>%
summarise(per = sum(TOT_W25) / first(TOT_REGION))
toJSON(genderStrictness)
write_json(x = genderStrictness, 'json/gender_strictness.json')
genderStrictness
populationData %>% select(region, contains('pts'))
populationData %>% select(state, region, contains('pts'))
usStatesACS2017
usStatesACS2017 <- states(cb = T, resolution = '5m', year = 2017)
head(usStatesACS2017@data)
populationData
nrow(usStatesACS2017)
usStatesACS2017@data$STUSPS
usStatesACS2017@data$STATENS
usStatesACS2017@data$NAME
inner_join(x = usStatesACS2017, y = populationData, by = c('STUSPS' = 'Postal Code'))
library(sf)
usStatesACS2017sf <- st_as_sf(usStatesACS2017)
usStatesACS2017sf
inner_join(x = usStatesACS2017sf, y = populationData, by = c('STUSPS' = 'Postal Code'))
statesGenderStrictness <- inner_join(x = usStatesACS2017sf, y = populationData, by = c('STUSPS' = 'Postal Code'))
library(geojsonio)
usStatesACS2017sf
usStatesACS2017sf4326 <- st_transform(4326)
usStatesACS2017sf4326 <- st_transform(usStatesACS2017sf, 4326)
usStatesACS2017sf4326
statesGenderStrictness <- inner_join(x = usStatesACS2017sf4326, y = populationData, by = c('STUSPS' = 'Postal Code'))
?geojson
??geojson
file_to_geojson(statesGenderStrictness)
geojson_json(statesGenderStrictness)
geojson_write(statesGenderStrictness, geometry = 'polygon', file = 'json/states_gender_strictness.geojson')
genderStrictness
usStatesACS2017sf <- st_as_sf(usStatesACS2017)
usStatesACS2017sf4326 <- st_transform(usStatesACS2017sf, 4326)
statesPop <- inner_join(x = usStatesACS2017sf4326, y = populationData, by = c('STUSPS' = 'Postal Code'))
geojson_write(statesPop, geometry = 'polygon', file = 'json/states_pop.geojson')
write_json(x = genderStrictness, 'json/gender_strictness.json')
populationData %>% select(state, region, contains('pts'))
distinct(populationData, F_CREGION_FINAL)
distinct(populationData, F_CREGION_FINAL)
populationData
distinct(genderStrictness, F_CREGION_FINAL)
regionS <- c('DC', 'TX', 'OK', 'AR', 'LA', 'MS', 'AL', 'TN', 'GA', 'FL', 'SC', 'NC', 'VA', 'KY', 'WV', 'MD', 'DE')
regionNE <- c('RI', 'NJ', 'PA', 'CT', 'NY', 'VT', 'NH', 'MA', 'ME')
regionMW <- c('OH', 'MI', 'IN', 'WI', 'IL', 'MN', 'IA', 'MO', 'ND', 'SD', 'NE', 'KS')
regionW <- c('AK', 'HI', 'WA', 'OR', 'CA', 'NV', 'ID', 'MT', 'WY', 'UT', 'AZ', 'NM', 'CO')
stateAbbrev <- stateAbbrev %>% mutate(region = case_when(
`Postal Code` %in% regionS ~ 'South',
`Postal Code` %in% regionNE ~ 'Northeast',
`Postal Code` %in% regionMW ~ 'Midwest',
`Postal Code` %in% regionW ~ 'West'
))
populationData <- populationData %>% left_join(stateAbbrev, by = c('state' = 'State/District'))
populationData
populationData <- read_csv(file = 'data/ACS_16_5YR_S0101/ACS_16_5YR_S0101_with_ann.csv')
populationData
populationData <- populationData %>%
select(-(contains('MOE'))) %>%
filter(row_number() > 1) %>%
select(`GEO.id`:HC03_EST_VC01, HC01_EST_VC28)
populationData <- populationData %>% mutate(
state = `GEO.display-label`,
pop = as.numeric(HC01_EST_VC01),
pop_male = as.numeric(HC02_EST_VC01),
pop_female = as.numeric(HC03_EST_VC01),
per_pop_adult = as.numeric(HC01_EST_VC28))
populationData <- populationData %>%
mutate(pop_adult = pop * per_pop_adult / 100) %>%
select(state, pop, pop_male, pop_female, per_pop_adult, pop_adult)
regionS <- c('DC', 'TX', 'OK', 'AR', 'LA', 'MS', 'AL', 'TN', 'GA', 'FL', 'SC', 'NC', 'VA', 'KY', 'WV', 'MD', 'DE')
regionNE <- c('RI', 'NJ', 'PA', 'CT', 'NY', 'VT', 'NH', 'MA', 'ME')
regionMW <- c('OH', 'MI', 'IN', 'WI', 'IL', 'MN', 'IA', 'MO', 'ND', 'SD', 'NE', 'KS')
regionW <- c('AK', 'HI', 'WA', 'OR', 'CA', 'NV', 'ID', 'MT', 'WY', 'UT', 'AZ', 'NM', 'CO')
stateAbbrev <- stateAbbrev %>% mutate(region = case_when(
`Postal Code` %in% regionS ~ 'South',
`Postal Code` %in% regionNE ~ 'Northeast',
`Postal Code` %in% regionMW ~ 'Midwest',
`Postal Code` %in% regionW ~ 'West'
))
populationData <- populationData %>% left_join(stateAbbrev, by = c('state' = 'State/District'))
populationData <- populationData %>%
mutate(tot_us = sum(pop_adult)) %>%
group_by(region) %>%
mutate(
tot_region = sum(pop_adult),
per_region = tot_region / tot_us) %>%
group_by(state) %>%
mutate(per_state = pop_adult / tot_region) %>%
ungroup()
populationData
populationData %>% rename(PostalCode = `Postal Code`)
populationData <- populationData %>% rename(PostalCode = `Postal Code`)
numPts <- 10000
populationData <- populationData %>%
mutate(ptsPerRegion = numPts * per_region,
ptsPerState = ptsPerRegion * per_state)
populationData %>% select(state, region, contains('pts'))
usStatesACS2017sf <- st_as_sf(usStatesACS2017)
usStatesACS2017sf4326 <- st_transform(usStatesACS2017sf, 4326)
populationData
statesPop <- inner_join(x = usStatesACS2017sf4326, y = populationData, by = c('STUSPS' = 'PostalCode'))
geojson_write(statesPop, geometry = 'polygon', file = 'json/states_pop.geojson')
statesPop
stateAbbrev
populationData %>% select('region')
statesP
statesPop
geojson_write(statesPop, geometry = 'polygon', file = 'json/states_pop.geojson', overwrite = T)
genderStrictness
genderStrictness <- w25 %>%
select(F_CREGION_FINAL, F_SEX_FINAL, TOT_REGION, TOT_W25, GUNSTRICT_W25) %>%
filter(GUNSTRICT_W25 != 'Refused') %>%
group_by(F_CREGION_FINAL, F_SEX_FINAL, GUNSTRICT_W25) %>%
summarise(per = sum(TOT_W25) / first(TOT_REGION)) %>%
mutate(class = case_when(
GUNSTRICT_W25 == 'Gun laws should be MORE strict than they are today' ~ 'high',
GUNSTRICT_W25 == 'Gun laws are about right' ~ 'neutral',
GUNSTRICT_W25 == 'Gun laws should be LESS strict than they are today' ~ 'low'
))
genderStrictness
write_json(x = genderStrictness, 'json/gender_strictness.json')
?write_json
write_json(x = genderStrictness, 'json/gender_strictness.json', overwrite = T)
distinct(statesPop, NAME)
statesPop
distinct(statesPop, NAME)
unique(statesPop$NAME)
sort(unique(statesPop$NAME))
contiguous <- statesPop %>% filter(!NAME %in% c('Alaska', 'Hawaii'))
geojson_write(contiguous, geometry = 'polygon', file = 'json/states_pop.geojson', overwrite = T)
geojson_write(contiguous, geometry = 'polygon', file = 'json/states_pop.geojson', overwrite = T)
geojson_write(contiguous, geometry = 'polygon', file = 'json/states_pop.geojson', overwrite = T)
geojson_write(contiguous, geometry = 'polygon', file = 'json/states_pop.geojson', overwrite = T)
genderStrictness <- w25 %>%
select(F_CREGION_FINAL, F_SEX_FINAL, TOT_REGION, TOT_W25, GUNSTRICT_W25) %>%
filter(GUNSTRICT_W25 != 'Refused') %>%
group_by(F_CREGION_FINAL, F_SEX_FINAL, GUNSTRICT_W25) %>%
summarise(per = sum(TOT_W25) / first(TOT_REGION)) %>%
mutate(class = case_when(
GUNSTRICT_W25 == 'Gun laws should be MORE strict than they are today' ~ 'high strict',
GUNSTRICT_W25 == 'Gun laws are about right' ~ 'neutral strict',
GUNSTRICT_W25 == 'Gun laws should be LESS strict than they are today' ~ 'low strict'
))
write_json(x = genderStrictness, 'json/gender_strictness.json', overwrite = T)
?spsample
contiguous
spsample(x = contiguous[1], 150)
?spTransform
usStatesACS2017sp4236 <- spTransform(usStatesACS2017, '4236')
showEPSG("+proj=longlat +ellps=WGS84")
library(rgdal)
showEPSG("+proj=longlat +ellps=WGS84")
usStatesACS2017sp4236 <- spTransform(usStatesACS2017, '+proj=longlat +ellps=WGS84')
spsample(x = contiguous[1], 50)
spsample(x = usStatesACS2017sp4236[1], 50)
spsample(x = usStatesACS2017sp4236[1], n = 10, type = 'random')
samp1 <- spsample(x = usStatesACS2017sp4236[1], n = 10, type = 'random')
plot(samp1)
samp1 <- spsample(x = usStatesACS2017sp4236[1], n = 5000, type = 'random')
geojson_write(samp1, geometry = 'polygon', file = 'json/samp1.geojson', overwrite = T)
s <- sp()
usStatesACS2017sp4236[1]
usStatesACS2017sp4236@data[1]
usStatesACS2017sp4236@data[,1]
usStatesACS2017sp4236@data[1,]
usStatesACS2017sp4236mrg <- merge(usStatesACS2017sp4236, populationData, by.x = 'STUSPS', by.y = 'PostalCode', all = F)
usStatesACS2017sp4236mrg[1,]
usStatesACS2017sp4236mrg@data[1,]
nrow(usStatesACS2017sp4236mrg)
randomList <- list()
for (i in nrow(usStatesACS2017sp4236mrg)) {
samp <- spsample(x = usStatesACS2017sp4236mrg[1], n = usStatesACS2017sp4236mrg$ptsPerState, geometry = 'polygon')
randomList <- append(randomList, samp)
}
for (i in nrow(usStatesACS2017sp4236mrg)) {
samp <- spsample(x = usStatesACS2017sp4236mrg[1], n = usStatesACS2017sp4236mrg$ptsPerState, geometry = 'polygon', type = 'random')
randomList <- append(randomList, samp)
}
for (i in nrow(usStatesACS2017sp4236mrg)) {
samp <- spsample(x = usStatesACS2017sp4236mrg[i], n = usStatesACS2017sp4236mrg[i]$ptsPerState, geometry = 'polygon', type = 'random')
randomList <- append(randomList, samp)
}
for (i in 1:nrow(usStatesACS2017sp4236mrg)) {
samp <- spsample(x = usStatesACS2017sp4236mrg[i], n = usStatesACS2017sp4236mrg[i]$ptsPerState, geometry = 'polygon', type = 'random')
randomList <- append(randomList, samp)
}
usStatesACS2017sp4236mrg[1]$ptsPerState
usStatesACS2017sp4236mrg[1]['ptsPerState']
usStatesACS2017sp4236mrg[1,]['ptsPerState']
usStatesACS2017sp4236mrg[1,]$ptsPerState
for (i in 1:nrow(usStatesACS2017sp4236mrg)) {
samp <- spsample(x = usStatesACS2017sp4236mrg[i,], n = usStatesACS2017sp4236mrg[i,]$ptsPerState, geometry = 'polygon', type = 'random')
randomList <- append(randomList, samp)
}
randomList[[1]]
usStatesACS2017sp4236mrg@data[1,]
for (i in 1:nrow(usStatesACS2017sp4236mrg)) {
samp <- spsample(x = usStatesACS2017sp4236mrg[i,], n = usStatesACS2017sp4236mrg[i,]$ptsPerState, geometry = 'polygon', type = 'random')
samp <- cbind(samp, sStatesACS2017sp4236mrg[i, c('region', 'state')])
randomList <- append(randomList, samp)
}
for (i in 1:nrow(usStatesACS2017sp4236mrg)) {
samp <- spsample(x = usStatesACS2017sp4236mrg[i,], n = usStatesACS2017sp4236mrg[i,]$ptsPerState, geometry = 'polygon', type = 'random')
samp <- cbind(samp, usStatesACS2017sp4236mrg[i, c('region', 'state')])
randomList <- append(randomList, samp)
}
sampDF <- SpatialPointsDataFrame(samp)
?as.SpatialPoints.SpatialPointsDataFrame
sampDF <- as.SpatialPoints.SpatialPointsDataFrame(samp)
sampDF <- as.SpatialPointsDataFrame(samp)
?as.SpatialPoints.SpatialPointsDataFrame
finalSPDF <- SpatialPointsDataFrame(coords = c(), data = data.frame(), proj4string = prj4326)
?SpatialPointsDataFrame
finalSPDF <- SpatialPointsDataFrame(coords = c(NA,NA), data = data.frame(), proj4string = prj4326)
samp
samp@coords[1,10]
dim(samp@coords)
samp@coords[1:10,2]
head(usStatesACS2017sp4236mrg@data)
SpatialPointsDataFrame(coords = samp@coords,
data = data.frame(STUSPS = currentState$STUSPS,
NAME = currentState$NAME,
region = currentState$regio), proj4string = prj4326)
prj4326 <- '+proj=longlat +ellps=WGS84'
usStatesACS2017sp4236 <- spTransform(usStatesACS2017, prj4326)
usStatesACS2017sp4236mrg <- merge(usStatesACS2017sp4236, populationData, by.x = 'STUSPS', by.y = 'PostalCode', all = F)
spList <- list()
spList <- list()
for (i in 1:1) {#nrow(usStatesACS2017sp4236mrg)) {
currentState <- usStatesACS2017sp4236mrg[i,]
currSample <- spsample(x = currentState, n = currentState$ptsPerState, geometry = 'polygon', type = 'random')
spdf <- SpatialPointsDataFrame(coords = currSamp@coords,
data = data.frame(STUSPS = currentState$STUSPS,
NAME = currentState$NAME,
region = currentState$regio), proj4string = prj4326)
spList <- append(spList, spdf)
#randomList <- append(randomList, samp)
}
for (i in 1:1) {#nrow(usStatesACS2017sp4236mrg)) {
currentState <- usStatesACS2017sp4236mrg[i,]
currSample <- spsample(x = currentState, n = currentState$ptsPerState, geometry = 'polygon', type = 'random')
spdf <- SpatialPointsDataFrame(coords = currSample@coords,
data = data.frame(STUSPS = currentState$STUSPS,
NAME = currentState$NAME,
region = currentState$regio), proj4string = prj4326)
spList <- append(spList, spdf)
#randomList <- append(randomList, samp)
}
for (i in 1:1) {#nrow(usStatesACS2017sp4236mrg)) {
currentState <- usStatesACS2017sp4236mrg[i,]
currSample <- spsample(x = currentState, n = currentState$ptsPerState, geometry = 'polygon', type = 'random')
spdf <- SpatialPointsDataFrame(coords = currSample@coords,
data = data.frame(STUSPS = currentState$STUSPS,
NAME = currentState$NAME,
region = currentState$regio), proj4string = CRS(prj4326))
spList <- append(spList, spdf)
#randomList <- append(randomList, samp)
}
for (i in 1:1) {#nrow(usStatesACS2017sp4236mrg)) {
currentState <- usStatesACS2017sp4236mrg[i,]
currSample <- spsample(x = currentState, n = currentState$ptsPerState, geometry = 'polygon', type = 'random')
spdf <- SpatialPointsDataFrame(coords = currSample@coords,
data = data.frame(STUSPS = currentState$STUSPS,
NAME = currentState$NAME,
region = currentState$region), proj4string = CRS(prj4326))
spList <- append(spList, spdf)
#randomList <- append(randomList, samp)
}
for (i in 1:1) {#nrow(usStatesACS2017sp4236mrg)) {
currentState <- usStatesACS2017sp4236mrg[i,]
numPoints <- currentState$ptsPerState
currSample <- spsample(x = currentState, n = numPoints, geometry = 'polygon', type = 'random')
spdf <- SpatialPointsDataFrame(coords = currSample@coords,
data = data.frame(STUSPS = rep(currentState$STUSPS, n),
NAME = rep(currentState$NAME, n),
region = rep(currentState$region, n)), proj4string = CRS(prj4326))
spList <- append(spList, spdf)
#randomList <- append(randomList, samp)
}
for (i in 1:1) {#nrow(usStatesACS2017sp4236mrg)) {
currentState <- usStatesACS2017sp4236mrg[i,]
numPoints <- currentState$ptsPerState
currSample <- spsample(x = currentState, n = numPoints, geometry = 'polygon', type = 'random')
spdf <- SpatialPointsDataFrame(coords = currSample@coords,
data = data.frame(STUSPS = rep(currentState@data$STUSPS, n),
NAME = rep(currentState@data$NAME, n),
region = rep(currentState@data$region, n)), proj4string = CRS(prj4326))
spList <- append(spList, spdf)
#randomList <- append(randomList, samp)
}
currentState
currentState@data
currentState@data$STUSPS
rep(currentState@data$STUSPS, n)
n
for (i in 1:1) {#nrow(usStatesACS2017sp4236mrg)) {
currentState <- usStatesACS2017sp4236mrg[i,]
numPoints <- currentState$ptsPerState
currSample <- spsample(x = currentState, n = numPoints, geometry = 'polygon', type = 'random')
spdf <- SpatialPointsDataFrame(coords = currSample@coords,
data = data.frame(STUSPS = rep(currentState@data$STUSPS, numPoints),
NAME = rep(currentState@data$NAME, numPoints),
region = rep(currentState@data$region, numPoints)), proj4string = CRS(prj4326))
spList <- append(spList, spdf)
#randomList <- append(randomList, samp)
}
spList[[1]]
spdf
spdf@bbox
spList <- list()
for (i in 1:5) {#nrow(usStatesACS2017sp4236mrg)) {
currentState <- usStatesACS2017sp4236mrg[i,]
numPoints <- currentState$ptsPerState
currSample <- spsample(x = currentState, n = numPoints, geometry = 'polygon', type = 'random')
spdf <- SpatialPointsDataFrame(coords = currSample@coords,
data = data.frame(STUSPS = rep(currentState@data$STUSPS, numPoints),
NAME = rep(currentState@data$NAME, numPoints),
region = rep(currentState@data$region, numPoints)), proj4string = CRS(prj4326))
spList <- append(spList, spdf)
#randomList <- append(randomList, samp)
}
finalSPDF <- spList[[1]]
finalSPDF
length(spList)
for (i in 2:length(spList)) {
finalSPDF <- rbind(finalSPDF, spList[[i]])
}
class(finalSPDF)
finalSPDF@data[1:10,]
finalSPDF@data[100:150,]
nrow(finalSPDF@data)
randomSPDF <- spList[[1]]
for (i in 2:length(spList)) {
randomSPDF <- rbind(randomSPDF, spList[[i]])
}
geojson_write(randomSPDF, geometry = 'polygon', file = 'json/samp1.geojson', overwrite = T)
geojson_write(randomSPDF, geometry = 'polygon', file = 'json/random_points.geojson', overwrite = T)
source('/Volumes/GoogleDrive/My Drive/work/upwork/gun_violence/census.R', echo=TRUE)
length(spList)
genderStrictness
spdf
genderStrictness <- w25 %>%
select(F_CREGION_FINAL, F_SEX_FINAL, TOT_REGION, TOT_W25, GUNSTRICT_W25) %>%
filter(GUNSTRICT_W25 != 'Refused') %>%
group_by(F_CREGION_FINAL, F_SEX_FINAL, GUNSTRICT_W25) %>%
summarise(per = sum(TOT_W25) / first(TOT_REGION)) %>%
mutate(class = case_when(
GUNSTRICT_W25 == 'Gun laws should be MORE strict than they are today' ~ 'high',
GUNSTRICT_W25 == 'Gun laws are about right' ~ 'neutral',
GUNSTRICT_W25 == 'Gun laws should be LESS strict than they are today' ~ 'low'
))
genderStrictness
write_json(x = genderStrictness, 'json/gender_strictness.json', overwrite = T)
source('/Volumes/GoogleDrive/My Drive/work/upwork/gun_violence/census.R', echo=TRUE)
